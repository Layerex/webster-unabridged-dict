#!/usr/bin/env python3

# import re

from bs4 import BeautifulSoup
from bs4.element import NavigableString
from chm.chm import CHMFile
from chm.chmlib import chm_enumerate, CHM_ENUMERATE_NORMAL
from sys import argv, stderr

SUPERSCRIPT = {"0": "‚Å∞", "1": "¬π", "2": "¬≤", "3": "¬≥", "4": "‚Å¥", "5": "‚Åµ", "6": "‚Å∂", "7": "‚Å∑", "8": "‚Å∏", "9": "‚Åπ", "+": "‚Å∫", "-": "‚Åª", "(": "‚ÅΩ", ")": "‚Åæ", "=": "‚Åº", "/": "‚óåÃÅ", "a": "·µÉ", "b": "·µá", "c": "·∂ú", "d": "·µà", "e": "·µâ", "f": "·∂†", "g": "·µç", "h": " ∞", "i": "‚Å±", "j": " ≤", "k": "·µè", "l": "À°", "m": "·µê", "n": "‚Åø", "o": "·µí", "p": "·µñ", "q": "êû•", "r": " ≥", "s": "À¢", "t": "·µó", "u": "·µò", "v": "·µõ", "w": " ∑", "x": "À£", "y": " ∏", "z": "·∂ª", "A": "·¥¨", "B": "·¥Æ", "C": "Íü≤", "D": "·¥∞", "E": "·¥±", "F": "Íü≥", "G": "·¥≥", "H": "·¥¥", "I": "·¥µ", "J": "·¥∂", "K": "·¥∑", "L": "·¥∏", "M": "·¥π", "N": "·¥∫", "O": "·¥º", "P": "·¥æ", "Q": "Íü¥", "R": "·¥ø", "T": "·µÄ", "U": "·µÅ", "V": "‚±Ω", "W": "·µÇ", "Y": "êû≤"}
SUBSCRIPT =   {"0": "‚ÇÄ", "1": "‚ÇÅ", "2": "‚ÇÇ", "3": "‚ÇÉ", "4": "‚ÇÑ", "5": "‚ÇÖ", "6": "‚ÇÜ", "7": "‚Çá", "8": "‚Çà", "9": "‚Çâ", "+": "‚Çä", "-": "‚Çã", "(": "‚Çç", ")": "‚Çé", "=": "‚Çå", "a": "‚Çê", "e": "‚Çë", "h": "‚Çï", "i": "·µ¢", "j": "‚±º", "k": "‚Çñ", "l": "‚Çó", "m": "‚Çò", "n": "‚Çô", "o": "‚Çí", "p": "‚Çö", "r": "·µ£", "s": "‚Çõ", "t": "‚Çú", "u": "·µ§", "v": "·µ•", "x": "‚Çì"}

def format_entry(html: str):
    html = html.replace("\r\n", "\n")
    data = html.split("<DL>\n\n")[1].split("\n</DL>")[0]
    word, definition = data.removeprefix("<!--~--><DT>").split("<!--=-->")
    definition = definition.replace("<dd>", "")
    soup = BeautifulSoup(definition, "html.parser")

    def replace_tags(start: str, end: str, *args, f=None, **kwargs):
        for tag in soup.find_all(*args, **kwargs):
            if f:
                tag.contents[0] = NavigableString(f(tag.contents[0]))
            if start:
                tag.contents.insert(0, NavigableString(start))
            if end:
                tag.contents.append(NavigableString(end))
            tag.unwrap()

    def plain(*args, **kwargs):
        replace_tags("", "", *args, **kwargs)

    def prefix(start: str, *args, **kwargs):
        replace_tags(start, "", *args, **kwargs)

    def escape(e: str, *args, **kwargs):
        replace_tags(f"\033[{e}m", "\033[0m", *args, **kwargs)

    def replace_by_dict(d: dict, s: str, tag: str) -> str:
        ns = ""
        success = True
        for c in s:
            try:
                ns += d[c]
            except KeyError:
                success = False
                ns += c
        if not success: # Restore tag
            return f"[{tag}]{ns}[/{tag}]"
        return ns

    def sup(s: str) -> str:
        return replace_by_dict(SUPERSCRIPT, s, "sup")

    def sub(s: str) -> str:
        return replace_by_dict(SUBSCRIPT, s, "sub")

    plain("sup", f=sup)
    plain("sub", f=sub)
    plain("span", class_="m1")
    prefix(" ", "span", class_="m2")
    prefix(" " * 2, "span", class_="m3")
    prefix(" " * 3, "span", class_="m4")
    escape("1", "b")
    escape("3", "i")
    escape("3", "span", class_="p")
    escape("4", "span", class_="col_darkgray")
    escape("31", "span", class_="col_darkred")
    escape("33", "span", class_="col_brown")
    escape("34", "span", class_="col_blue")
    escape("35", "span", class_="col_indigo")

    formatted = str(soup)
    # tags = re.findall(r"<[^>]*>", formatted)
    definition = formatted.replace("&lt;", "<").replace("&gt;", ">").replace(" ‚Äî", "\n‚Äî")
    # codes = re.findall(r"&[a-zA-Z];", formatted)
    
    alias = None
    word_parts = word.rstrip(".").split(", ")
    if len(word_parts) == 2:
        if len(word_parts[0]) == 1: # Single letter
            word = word_parts[0]
        elif word_parts[1].capitalize() in ("The", "A", "An", "'d", "L'", "La", "Il"):
            word = word_parts[0]
            definition = (f"{word_parts[1]} {word_parts[0]}\n" + definition).replace("\n", "\n ")

    print(f":{word}:{definition}")
    # if tags:
    #     print(tags, file=stderr)
    # if codes:
    #     print(codes, file=stderr)

def main():
    f = CHMFile()
    f.LoadCHM(argv[1])

    def enumerator(chm_file, ui, context):
        if len(ui.path) == 11 and ui.path.endswith(b".htm"):
            success, ui = f.ResolveObject(ui.path)
            assert success == 0
            _, content = f.RetrieveObject(ui)
            format_entry(content.decode())

    chm_enumerate(f.file, CHM_ENUMERATE_NORMAL, enumerator, None)

if __name__ == "__main__":
    main()
